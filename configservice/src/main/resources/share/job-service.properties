server.port=8086
#Config Database
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/job-service?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.jpa.show-sql:true
#t? ??ng b?t c? ch? thêm OAuth2 Bearer Token vào các request Feign khi dùng Spring Security OAuth2 Client
spring.cloud.openfeign.oauth2.enable=true
# ??ng ký client credentials ho?c c?u hình b?ng method ClientRegistrationRepository
spring.security.oauth2.client.registration.company-service.client-id=job-service
spring.security.oauth2.client.registration.company-service.client-secret=26102004
spring.security.oauth2.client.registration.company-service.authorization-grant-type=client_credentials
spring.security.oauth2.client.registration.company-service.scope=read,write,internal
spring.security.oauth2.client.registration.company-service.provider=auth-provider
#
spring.security.oauth2.client.registration.skill-service.client-id=job-service
spring.security.oauth2.client.registration.skill-service.client-secret=26102004
spring.security.oauth2.client.registration.skill-service.authorization-grant-type=client_credentials
spring.security.oauth2.client.registration.skill-service.scope=read,write,internal
spring.security.oauth2.client.registration.skill-service.provider=auth-provider
#
spring.security.oauth2.client.provider.auth-provider.token-uri=http://localhost:9000/oauth2/token